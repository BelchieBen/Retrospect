// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Boards {
  id           String         @id @default(cuid())
  name         String
  columns      Column[]
  archived     Boolean        @default(false)
  archivedAt   DateTime?
  ownerId      String
  owner        User           @relation(fields: [ownerId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BoardMembers BoardMembers[]
  cards        Card[]
  notifications Notification[]

  @@index([name])
}

model Column {
  id        String   @id @default(cuid())
  name      String?
  position  Int
  boardId   String
  board     Boards   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String        @id @default(cuid())
  name        String?
  description String?
  archived    Boolean       @default(false)
  archivedAt  DateTime?
  position    Int
  createdById String
  createdBy   User          @relation(fields: [createdById], references: [id])
  columnId    String?
  column      Column?       @relation(fields: [columnId], references: [id], onDelete: SetNull)
  boardId     String
  board       Boards        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  gifUrl      String?
  comments    Comment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CardMembers CardMembers[]
  notifications Notification[]

  @@index([name])
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Comment {
  id          String   @id @default(cuid())
  value       String
  cardId      String
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([value])
}

model BoardMembers {
  id        String   @id @default(cuid())
  boardId   String
  userId    String
  board     Boards   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId, userId])
}

model CardMembers {
  id        String   @id @default(cuid())
  cardId    String
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId, userId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  ext_expires_in           Int?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  Boards Boards[]

  Card Card[]

  BoardMembers BoardMembers[]

  CardMembers CardMembers[]

  Comment Comment[]

  Feedback Feedback[]

  notifications Notification[]
  createdNotifications Notification[] @relation("NotificationCreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id        String   @id @default(cuid())
  type      String // bug, feature, improvement, general
  subject   String
  message   String
  email     String?
  anonymous Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([createdAt])
}

model Notification {
  id            String            @id @default(cuid())
  title         String
  content       String
  type          NotificationType
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdByUserId String?
  createdByUser User?             @relation("NotificationCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  boardId       String?
  board         Boards?           @relation(fields: [boardId], references: [id], onDelete: SetNull)
  cardId        String?
  card          Card?             @relation(fields: [cardId], references: [id], onDelete: SetNull)
  read          Boolean           @default(false)
  dismissed     Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
  @@index([read])
  @@index([dismissed])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  CARD_CREATED
  CARD_UPDATED
  CARD_ARCHIVED
  CARD_RESTORED
  CARD_DELETED
  CARD_COMMENTED
  CARD_ASSIGNED
  BOARD_INVITED
}
